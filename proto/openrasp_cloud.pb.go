// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/openrasp_cloud.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/openrasp_cloud.proto

It has these top-level messages:
	UpdateInfo
	Agent
	Rasp
	UpdateResult
	RegistrationResponse
	AddRaspResponse
	SumData
	HeartBeatInfo
	Plugin
	PropertiesConf
	HeartBeatResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// 升级信息
type UpdateInfo struct {
	Id             string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RaspId         []string        `protobuf:"bytes,5,rep,name=raspId" json:"raspId,omitempty"`
	PropertiesConf *PropertiesConf `protobuf:"bytes,2,opt,name=propertiesConf" json:"propertiesConf,omitempty"`
	Plugins        []*Plugin       `protobuf:"bytes,4,rep,name=plugins" json:"plugins,omitempty"`
}

func (m *UpdateInfo) Reset()                    { *m = UpdateInfo{} }
func (m *UpdateInfo) String() string            { return proto1.CompactTextString(m) }
func (*UpdateInfo) ProtoMessage()               {}
func (*UpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateInfo) GetRaspId() []string {
	if m != nil {
		return m.RaspId
	}
	return nil
}

func (m *UpdateInfo) GetPropertiesConf() *PropertiesConf {
	if m != nil {
		return m.PropertiesConf
	}
	return nil
}

func (m *UpdateInfo) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

// Agent信息
type Agent struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	HostName string `protobuf:"bytes,6,opt,name=hostName" json:"hostName,omitempty"`
	Os       string `protobuf:"bytes,8,opt,name=os" json:"os,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto1.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Agent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Agent) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Agent) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Agent) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// rasp 信息
type Rasp struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Version     string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	JavaVersion string `protobuf:"bytes,7,opt,name=javaVersion" json:"javaVersion,omitempty"`
	RaspHome    string `protobuf:"bytes,8,opt,name=raspHome" json:"raspHome,omitempty"`
	StartTime   uint64 `protobuf:"varint,9,opt,name=startTime" json:"startTime,omitempty"`
}

func (m *Rasp) Reset()                    { *m = Rasp{} }
func (m *Rasp) String() string            { return proto1.CompactTextString(m) }
func (*Rasp) ProtoMessage()               {}
func (*Rasp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Rasp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rasp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Rasp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Rasp) GetJavaVersion() string {
	if m != nil {
		return m.JavaVersion
	}
	return ""
}

func (m *Rasp) GetRaspHome() string {
	if m != nil {
		return m.RaspHome
	}
	return ""
}

func (m *Rasp) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

// update 结果
type UpdateResult struct {
	UpdateId  string `protobuf:"bytes,1,opt,name=updateId" json:"updateId,omitempty"`
	IsSuccess bool   `protobuf:"varint,2,opt,name=isSuccess" json:"isSuccess,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResult) Reset()                    { *m = UpdateResult{} }
func (m *UpdateResult) String() string            { return proto1.CompactTextString(m) }
func (*UpdateResult) ProtoMessage()               {}
func (*UpdateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateResult) GetUpdateId() string {
	if m != nil {
		return m.UpdateId
	}
	return ""
}

func (m *UpdateResult) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *UpdateResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Agent注册返回信息
type RegistrationResponse struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RegistrationResponse) Reset()                    { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string            { return proto1.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()               {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegistrationResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *RegistrationResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 添加Rasp的返回信息
type AddRaspResponse struct {
	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	// 添加失败的话 失败信息
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AddRaspResponse) Reset()                    { *m = AddRaspResponse{} }
func (m *AddRaspResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddRaspResponse) ProtoMessage()               {}
func (*AddRaspResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddRaspResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *AddRaspResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 统计信息
type SumData struct {
	Block   map[string]int64 `protobuf:"bytes,1,rep,name=block" json:"block,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Info    map[string]int64 `protobuf:"bytes,2,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Request int64            `protobuf:"varint,3,opt,name=request" json:"request,omitempty"`
	Hook    int64            `protobuf:"varint,4,opt,name=hook" json:"hook,omitempty"`
}

func (m *SumData) Reset()                    { *m = SumData{} }
func (m *SumData) String() string            { return proto1.CompactTextString(m) }
func (*SumData) ProtoMessage()               {}
func (*SumData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SumData) GetBlock() map[string]int64 {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *SumData) GetInfo() map[string]int64 {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SumData) GetRequest() int64 {
	if m != nil {
		return m.Request
	}
	return 0
}

func (m *SumData) GetHook() int64 {
	if m != nil {
		return m.Hook
	}
	return 0
}

// 心跳信息
type HeartBeatInfo struct {
	Id           string              `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	SumData      map[string]*SumData `protobuf:"bytes,1,rep,name=sumData" json:"sumData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UpdateResult *UpdateResult       `protobuf:"bytes,2,opt,name=updateResult" json:"updateResult,omitempty"`
}

func (m *HeartBeatInfo) Reset()                    { *m = HeartBeatInfo{} }
func (m *HeartBeatInfo) String() string            { return proto1.CompactTextString(m) }
func (*HeartBeatInfo) ProtoMessage()               {}
func (*HeartBeatInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HeartBeatInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HeartBeatInfo) GetSumData() map[string]*SumData {
	if m != nil {
		return m.SumData
	}
	return nil
}

func (m *HeartBeatInfo) GetUpdateResult() *UpdateResult {
	if m != nil {
		return m.UpdateResult
	}
	return nil
}

// js插件
type Plugin struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto1.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// properties 配置
type PropertiesConf struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PropertiesConf) Reset()                    { *m = PropertiesConf{} }
func (m *PropertiesConf) String() string            { return proto1.CompactTextString(m) }
func (*PropertiesConf) ProtoMessage()               {}
func (*PropertiesConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PropertiesConf) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type HeartBeatResponse struct {
	IsSuccess bool   `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto1.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HeartBeatResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *HeartBeatResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*UpdateInfo)(nil), "proto.UpdateInfo")
	proto1.RegisterType((*Agent)(nil), "proto.Agent")
	proto1.RegisterType((*Rasp)(nil), "proto.Rasp")
	proto1.RegisterType((*UpdateResult)(nil), "proto.UpdateResult")
	proto1.RegisterType((*RegistrationResponse)(nil), "proto.RegistrationResponse")
	proto1.RegisterType((*AddRaspResponse)(nil), "proto.AddRaspResponse")
	proto1.RegisterType((*SumData)(nil), "proto.SumData")
	proto1.RegisterType((*HeartBeatInfo)(nil), "proto.HeartBeatInfo")
	proto1.RegisterType((*Plugin)(nil), "proto.Plugin")
	proto1.RegisterType((*PropertiesConf)(nil), "proto.PropertiesConf")
	proto1.RegisterType((*HeartBeatResponse)(nil), "proto.HeartBeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OpenRASP service

type OpenRASPClient interface {
	// 心跳请求
	HeartBeat(ctx context.Context, in *HeartBeatInfo, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	// 注册agent
	Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// 添加 Rasp
	AddRasp(ctx context.Context, in *Rasp, opts ...grpc.CallOption) (*AddRaspResponse, error)
	// 订阅升级信息推送
	SubscribeUpdate(ctx context.Context, in *Agent, opts ...grpc.CallOption) (OpenRASP_SubscribeUpdateClient, error)
}

type openRASPClient struct {
	cc *grpc.ClientConn
}

func NewOpenRASPClient(cc *grpc.ClientConn) OpenRASPClient {
	return &openRASPClient{cc}
}

func (c *openRASPClient) HeartBeat(ctx context.Context, in *HeartBeatInfo, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/proto.OpenRASP/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRASPClient) Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := grpc.Invoke(ctx, "/proto.OpenRASP/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRASPClient) AddRasp(ctx context.Context, in *Rasp, opts ...grpc.CallOption) (*AddRaspResponse, error) {
	out := new(AddRaspResponse)
	err := grpc.Invoke(ctx, "/proto.OpenRASP/AddRasp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRASPClient) SubscribeUpdate(ctx context.Context, in *Agent, opts ...grpc.CallOption) (OpenRASP_SubscribeUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OpenRASP_serviceDesc.Streams[0], c.cc, "/proto.OpenRASP/SubscribeUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &openRASPSubscribeUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenRASP_SubscribeUpdateClient interface {
	Recv() (*UpdateInfo, error)
	grpc.ClientStream
}

type openRASPSubscribeUpdateClient struct {
	grpc.ClientStream
}

func (x *openRASPSubscribeUpdateClient) Recv() (*UpdateInfo, error) {
	m := new(UpdateInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OpenRASP service

type OpenRASPServer interface {
	// 心跳请求
	HeartBeat(context.Context, *HeartBeatInfo) (*HeartBeatResponse, error)
	// 注册agent
	Register(context.Context, *Agent) (*RegistrationResponse, error)
	// 添加 Rasp
	AddRasp(context.Context, *Rasp) (*AddRaspResponse, error)
	// 订阅升级信息推送
	SubscribeUpdate(*Agent, OpenRASP_SubscribeUpdateServer) error
}

func RegisterOpenRASPServer(s *grpc.Server, srv OpenRASPServer) {
	s.RegisterService(&_OpenRASP_serviceDesc, srv)
}

func _OpenRASP_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenRASPServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OpenRASP/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenRASPServer).HeartBeat(ctx, req.(*HeartBeatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenRASP_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenRASPServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OpenRASP/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenRASPServer).Register(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenRASP_AddRasp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rasp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenRASPServer).AddRasp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OpenRASP/AddRasp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenRASPServer).AddRasp(ctx, req.(*Rasp))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenRASP_SubscribeUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Agent)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenRASPServer).SubscribeUpdate(m, &openRASPSubscribeUpdateServer{stream})
}

type OpenRASP_SubscribeUpdateServer interface {
	Send(*UpdateInfo) error
	grpc.ServerStream
}

type openRASPSubscribeUpdateServer struct {
	grpc.ServerStream
}

func (x *openRASPSubscribeUpdateServer) Send(m *UpdateInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _OpenRASP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OpenRASP",
	HandlerType: (*OpenRASPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _OpenRASP_HeartBeat_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _OpenRASP_Register_Handler,
		},
		{
			MethodName: "AddRasp",
			Handler:    _OpenRASP_AddRasp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeUpdate",
			Handler:       _OpenRASP_SubscribeUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/openrasp_cloud.proto",
}

func init() { proto1.RegisterFile("proto/openrasp_cloud.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5f, 0x4f, 0x13, 0x4b,
	0x14, 0xef, 0xf4, 0x7f, 0x4f, 0x4b, 0xb9, 0xcc, 0xe5, 0x92, 0xb9, 0x7b, 0xef, 0x43, 0xdd, 0x98,
	0xd8, 0x18, 0x03, 0xa4, 0x26, 0x40, 0x34, 0x3c, 0x80, 0x9a, 0x80, 0x26, 0x48, 0xa6, 0xe2, 0xab,
	0x99, 0xb6, 0x43, 0x59, 0x69, 0x67, 0xd6, 0x9d, 0x59, 0x12, 0x3e, 0x82, 0xdf, 0xc1, 0x07, 0xbf,
	0x9a, 0xef, 0x7e, 0x08, 0x33, 0x7f, 0xb6, 0xdd, 0x2d, 0xc4, 0xc4, 0xf0, 0xb4, 0x73, 0xce, 0xf9,
	0x9d, 0xdf, 0xf9, 0xbf, 0x10, 0xc4, 0x89, 0xd4, 0x72, 0x47, 0xc6, 0x5c, 0x24, 0x4c, 0xc5, 0x9f,
	0xc6, 0x33, 0x99, 0x4e, 0xb6, 0xad, 0x12, 0xd7, 0xec, 0x27, 0xfc, 0x86, 0x00, 0x2e, 0xe2, 0x09,
	0xd3, 0xfc, 0x54, 0x5c, 0x4a, 0xdc, 0x85, 0x72, 0x34, 0x21, 0xa8, 0x87, 0xfa, 0x2d, 0x5a, 0x8e,
	0x26, 0x78, 0x0b, 0xea, 0xc6, 0xf3, 0x74, 0x42, 0x6a, 0xbd, 0x4a, 0xbf, 0x45, 0xbd, 0x84, 0x0f,
	0xa1, 0x1b, 0x27, 0x32, 0xe6, 0x89, 0x8e, 0xb8, 0x7a, 0x25, 0xc5, 0x25, 0x29, 0xf7, 0x50, 0xbf,
	0x3d, 0xf8, 0xc7, 0xb1, 0x6f, 0x9f, 0x17, 0x8c, 0x74, 0x05, 0x8c, 0x9f, 0x40, 0x23, 0x9e, 0xa5,
	0xd3, 0x48, 0x28, 0x52, 0xed, 0x55, 0xfa, 0xed, 0xc1, 0x5a, 0xe6, 0x67, 0xb5, 0x34, 0xb3, 0x86,
	0x17, 0x50, 0x3b, 0x9a, 0x72, 0xa1, 0xef, 0x24, 0xf6, 0x17, 0x54, 0xae, 0xf9, 0xad, 0x8d, 0xda,
	0xa2, 0xe6, 0x89, 0x03, 0x68, 0x5e, 0x49, 0xa5, 0xcf, 0xd8, 0x9c, 0x93, 0xba, 0x55, 0x2f, 0x64,
	0xe3, 0x2d, 0x15, 0x69, 0x3a, 0x6f, 0xa9, 0xc2, 0xef, 0x08, 0xaa, 0x94, 0xa9, 0xf8, 0x0e, 0x2d,
	0x86, 0xaa, 0xbe, 0x8d, 0x39, 0xa9, 0x59, 0x8d, 0x7d, 0x63, 0x02, 0x8d, 0x1b, 0x9e, 0xa8, 0x48,
	0x0a, 0xcf, 0x9b, 0x89, 0xb8, 0x07, 0xed, 0xcf, 0xec, 0x86, 0x7d, 0xf4, 0xd6, 0x86, 0xb5, 0xe6,
	0x55, 0x26, 0x29, 0xd3, 0xb1, 0x13, 0x39, 0xe7, 0x3e, 0xfc, 0x42, 0xc6, 0xff, 0x43, 0x4b, 0x69,
	0x96, 0xe8, 0x0f, 0xd1, 0x9c, 0x93, 0x56, 0x0f, 0xf5, 0xab, 0x74, 0xa9, 0x08, 0x47, 0xd0, 0x71,
	0x73, 0xa1, 0x5c, 0xa5, 0x33, 0x6d, 0x98, 0x52, 0x37, 0xa7, 0x2c, 0xdf, 0x85, 0x6c, 0x98, 0x22,
	0x35, 0x4c, 0xc7, 0x63, 0xae, 0x94, 0x6d, 0x49, 0x93, 0x2e, 0x15, 0x26, 0xff, 0x39, 0x57, 0x8a,
	0x4d, 0x39, 0xa9, 0xb8, 0xfc, 0xbd, 0x18, 0x9e, 0xc1, 0x26, 0xe5, 0xd3, 0x48, 0xe9, 0x84, 0xe9,
	0x48, 0x0a, 0xca, 0x55, 0x2c, 0x85, 0xe2, 0x45, 0x3e, 0xf4, 0x1b, 0xbe, 0x72, 0x91, 0xef, 0x14,
	0xd6, 0x8f, 0x26, 0x13, 0xd3, 0xd8, 0x07, 0x53, 0x7d, 0x2d, 0x43, 0x63, 0x98, 0xce, 0x5f, 0x33,
	0xcd, 0xf0, 0x0e, 0xd4, 0x46, 0x33, 0x39, 0xbe, 0x26, 0xc8, 0xee, 0xca, 0xbf, 0x7e, 0x57, 0xbc,
	0x79, 0xfb, 0xd8, 0xd8, 0xde, 0x08, 0x9d, 0xdc, 0x52, 0x87, 0xc3, 0xcf, 0xa0, 0x1a, 0x89, 0x4b,
	0x49, 0xca, 0x16, 0x4f, 0x56, 0xf0, 0x66, 0xd1, 0x1d, 0xdc, 0xa2, 0x4c, 0x12, 0x09, 0xff, 0x92,
	0x72, 0xa5, 0x6d, 0x7f, 0x2a, 0x34, 0x13, 0xcd, 0x36, 0x5c, 0x49, 0x79, 0x4d, 0xaa, 0x56, 0x6d,
	0xdf, 0xc1, 0x01, 0xc0, 0x32, 0x60, 0xb6, 0x86, 0x68, 0xb9, 0x86, 0x9b, 0x50, 0xbb, 0x61, 0xb3,
	0xd4, 0x15, 0x54, 0xa1, 0x4e, 0x78, 0x51, 0x3e, 0x40, 0xc1, 0x3e, 0xb4, 0x16, 0xa1, 0xff, 0xc4,
	0x31, 0xfc, 0x81, 0x60, 0xed, 0x84, 0xb3, 0x44, 0x1f, 0x73, 0xa6, 0x73, 0x67, 0x5a, 0x59, 0xac,
	0xed, 0x4b, 0x68, 0x28, 0x57, 0x9d, 0xef, 0xd1, 0x23, 0x5f, 0x73, 0xc1, 0x2d, 0xeb, 0x80, 0x2b,
	0x3e, 0xf3, 0xc0, 0xfb, 0xd0, 0x49, 0x73, 0x9b, 0xe6, 0x2f, 0xf9, 0x6f, 0xcf, 0x90, 0x5f, 0x42,
	0x5a, 0x00, 0x06, 0x6f, 0xa1, 0x93, 0x67, 0xbc, 0xa7, 0xa6, 0xc7, 0xf9, 0x9a, 0xda, 0x83, 0x6e,
	0x71, 0x12, 0xf9, 0x1a, 0xf7, 0xa0, 0xee, 0x6e, 0xdf, 0x34, 0x5d, 0x98, 0x1b, 0x76, 0x34, 0xf6,
	0x6d, 0x46, 0x34, 0x96, 0x42, 0x73, 0xe1, 0xb2, 0xeb, 0xd0, 0x4c, 0x0c, 0x9f, 0x42, 0xb7, 0xf8,
	0xaf, 0xc9, 0x63, 0x51, 0x11, 0xfb, 0x0e, 0x36, 0x16, 0xfd, 0x78, 0xe8, 0x82, 0x0e, 0x7e, 0x22,
	0x68, 0xbe, 0x8f, 0xb9, 0xa0, 0x47, 0xc3, 0x73, 0x7c, 0x08, 0xad, 0x05, 0x33, 0xde, 0xbc, 0xaf,
	0xf7, 0x01, 0x59, 0xd5, 0x66, 0x19, 0x84, 0x25, 0xbc, 0x0f, 0x4d, 0x77, 0x87, 0x3c, 0xc1, 0x1d,
	0x8f, 0xb3, 0xbf, 0xbd, 0xe0, 0x3f, 0x2f, 0xdd, 0x77, 0xa6, 0x61, 0x09, 0xef, 0x42, 0xc3, 0x1f,
	0x1c, 0x6e, 0x67, 0x48, 0xa6, 0xe2, 0x60, 0x2b, 0x23, 0x29, 0x5e, 0x63, 0x58, 0xc2, 0x7b, 0xb0,
	0x3e, 0x4c, 0x47, 0x6a, 0x9c, 0x44, 0x23, 0xee, 0x46, 0xbb, 0x12, 0x71, 0xa3, 0x30, 0x77, 0x93,
	0x7a, 0x58, 0xda, 0x45, 0xa3, 0xba, 0xd5, 0x3e, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xa4,
	0x26, 0x9f, 0x53, 0x06, 0x00, 0x00,
}
