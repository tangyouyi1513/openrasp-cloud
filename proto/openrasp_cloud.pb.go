// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openrasp_cloud.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	openrasp_cloud.proto

It has these top-level messages:
	UpdateInfo
	Agent
	Rasp
	UpdateResult
	RegistrationResponse
	AddRaspResponse
	HeartBeatInfo
	Plugin
	PropertiesConf
	Log4JConf
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// RASP 类型
type Rasp_RaspType int32

const (
	Rasp_JAVA Rasp_RaspType = 0
	Rasp_PHP  Rasp_RaspType = 1
)

var Rasp_RaspType_name = map[int32]string{
	0: "JAVA",
	1: "PHP",
}
var Rasp_RaspType_value = map[string]int32{
	"JAVA": 0,
	"PHP":  1,
}

func (x Rasp_RaspType) String() string {
	return proto1.EnumName(Rasp_RaspType_name, int32(x))
}
func (Rasp_RaspType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// 升级信息
type UpdateInfo struct {
	Id             uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PropertiesConf *PropertiesConf `protobuf:"bytes,2,opt,name=propertiesConf" json:"propertiesConf,omitempty"`
	Log4JConf      *Log4JConf      `protobuf:"bytes,3,opt,name=log4jConf" json:"log4jConf,omitempty"`
	Plugins        []*Plugin       `protobuf:"bytes,4,rep,name=plugins" json:"plugins,omitempty"`
}

func (m *UpdateInfo) Reset()                    { *m = UpdateInfo{} }
func (m *UpdateInfo) String() string            { return proto1.CompactTextString(m) }
func (*UpdateInfo) ProtoMessage()               {}
func (*UpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateInfo) GetPropertiesConf() *PropertiesConf {
	if m != nil {
		return m.PropertiesConf
	}
	return nil
}

func (m *UpdateInfo) GetLog4JConf() *Log4JConf {
	if m != nil {
		return m.Log4JConf
	}
	return nil
}

func (m *UpdateInfo) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

// Agent信息
type Agent struct {
	HostName string `protobuf:"bytes,6,opt,name=hostName" json:"hostName,omitempty"`
	Os       string `protobuf:"bytes,8,opt,name=os" json:"os,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto1.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Agent) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Agent) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// rasp 信息
type Rasp struct {
	Id       string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Uid      uint32        `protobuf:"varint,9,opt,name=uid" json:"uid,omitempty"`
	Gid      uint32        `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	Euid     uint32        `protobuf:"varint,3,opt,name=euid" json:"euid,omitempty"`
	UserName string        `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
	Type     Rasp_RaspType `protobuf:"varint,5,opt,name=type,enum=proto.Rasp_RaspType" json:"type,omitempty"`
	Version  string        `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	// 框架类型
	FrameWorkType string `protobuf:"bytes,7,opt,name=frameWorkType" json:"frameWorkType,omitempty"`
	// 框架版本
	FrameWorkVersion string `protobuf:"bytes,8,opt,name=frameWorkVersion" json:"frameWorkVersion,omitempty"`
}

func (m *Rasp) Reset()                    { *m = Rasp{} }
func (m *Rasp) String() string            { return proto1.CompactTextString(m) }
func (*Rasp) ProtoMessage()               {}
func (*Rasp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Rasp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rasp) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Rasp) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *Rasp) GetEuid() uint32 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *Rasp) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Rasp) GetType() Rasp_RaspType {
	if m != nil {
		return m.Type
	}
	return Rasp_JAVA
}

func (m *Rasp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Rasp) GetFrameWorkType() string {
	if m != nil {
		return m.FrameWorkType
	}
	return ""
}

func (m *Rasp) GetFrameWorkVersion() string {
	if m != nil {
		return m.FrameWorkVersion
	}
	return ""
}

// update 结果
type UpdateResult struct {
	UpdateId  uint64 `protobuf:"varint,1,opt,name=updateId" json:"updateId,omitempty"`
	IsSuccess bool   `protobuf:"varint,2,opt,name=isSuccess" json:"isSuccess,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResult) Reset()                    { *m = UpdateResult{} }
func (m *UpdateResult) String() string            { return proto1.CompactTextString(m) }
func (*UpdateResult) ProtoMessage()               {}
func (*UpdateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateResult) GetUpdateId() uint64 {
	if m != nil {
		return m.UpdateId
	}
	return 0
}

func (m *UpdateResult) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *UpdateResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Agent注册返回信息
type RegistrationResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *RegistrationResponse) Reset()                    { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string            { return proto1.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()               {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegistrationResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 添加Rasp的返回信息
type AddRaspResponse struct {
	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	// 添加失败的话 失败信息
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AddRaspResponse) Reset()                    { *m = AddRaspResponse{} }
func (m *AddRaspResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddRaspResponse) ProtoMessage()               {}
func (*AddRaspResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddRaspResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *AddRaspResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 心跳信息
type HeartBeatInfo struct {
	Rasps []*Rasp `protobuf:"bytes,1,rep,name=rasps" json:"rasps,omitempty"`
}

func (m *HeartBeatInfo) Reset()                    { *m = HeartBeatInfo{} }
func (m *HeartBeatInfo) String() string            { return proto1.CompactTextString(m) }
func (*HeartBeatInfo) ProtoMessage()               {}
func (*HeartBeatInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HeartBeatInfo) GetRasps() []*Rasp {
	if m != nil {
		return m.Rasps
	}
	return nil
}

// js插件
type Plugin struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto1.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// properties 配置
type PropertiesConf struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PropertiesConf) Reset()                    { *m = PropertiesConf{} }
func (m *PropertiesConf) String() string            { return proto1.CompactTextString(m) }
func (*PropertiesConf) ProtoMessage()               {}
func (*PropertiesConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PropertiesConf) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// log4j 配置
type Log4JConf struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Log4JConf) Reset()                    { *m = Log4JConf{} }
func (m *Log4JConf) String() string            { return proto1.CompactTextString(m) }
func (*Log4JConf) ProtoMessage()               {}
func (*Log4JConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Log4JConf) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto1.RegisterType((*UpdateInfo)(nil), "proto.UpdateInfo")
	proto1.RegisterType((*Agent)(nil), "proto.Agent")
	proto1.RegisterType((*Rasp)(nil), "proto.Rasp")
	proto1.RegisterType((*UpdateResult)(nil), "proto.UpdateResult")
	proto1.RegisterType((*RegistrationResponse)(nil), "proto.RegistrationResponse")
	proto1.RegisterType((*AddRaspResponse)(nil), "proto.AddRaspResponse")
	proto1.RegisterType((*HeartBeatInfo)(nil), "proto.HeartBeatInfo")
	proto1.RegisterType((*Plugin)(nil), "proto.Plugin")
	proto1.RegisterType((*PropertiesConf)(nil), "proto.PropertiesConf")
	proto1.RegisterType((*Log4JConf)(nil), "proto.Log4jConf")
	proto1.RegisterEnum("proto.Rasp_RaspType", Rasp_RaspType_name, Rasp_RaspType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OpenRASP service

type OpenRASPClient interface {
	// 心跳请求
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (OpenRASP_HeartBeatClient, error)
	// 注册agent
	Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// 添加 Rasp
	AddRasp(ctx context.Context, in *Rasp, opts ...grpc.CallOption) (*AddRaspResponse, error)
}

type openRASPClient struct {
	cc *grpc.ClientConn
}

func NewOpenRASPClient(cc *grpc.ClientConn) OpenRASPClient {
	return &openRASPClient{cc}
}

func (c *openRASPClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (OpenRASP_HeartBeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OpenRASP_serviceDesc.Streams[0], c.cc, "/proto.OpenRASP/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &openRASPHeartBeatClient{stream}
	return x, nil
}

type OpenRASP_HeartBeatClient interface {
	Send(*HeartBeatInfo) error
	Recv() (*UpdateInfo, error)
	grpc.ClientStream
}

type openRASPHeartBeatClient struct {
	grpc.ClientStream
}

func (x *openRASPHeartBeatClient) Send(m *HeartBeatInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openRASPHeartBeatClient) Recv() (*UpdateInfo, error) {
	m := new(UpdateInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openRASPClient) Register(ctx context.Context, in *Agent, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := grpc.Invoke(ctx, "/proto.OpenRASP/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRASPClient) AddRasp(ctx context.Context, in *Rasp, opts ...grpc.CallOption) (*AddRaspResponse, error) {
	out := new(AddRaspResponse)
	err := grpc.Invoke(ctx, "/proto.OpenRASP/AddRasp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenRASP service

type OpenRASPServer interface {
	// 心跳请求
	HeartBeat(OpenRASP_HeartBeatServer) error
	// 注册agent
	Register(context.Context, *Agent) (*RegistrationResponse, error)
	// 添加 Rasp
	AddRasp(context.Context, *Rasp) (*AddRaspResponse, error)
}

func RegisterOpenRASPServer(s *grpc.Server, srv OpenRASPServer) {
	s.RegisterService(&_OpenRASP_serviceDesc, srv)
}

func _OpenRASP_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenRASPServer).HeartBeat(&openRASPHeartBeatServer{stream})
}

type OpenRASP_HeartBeatServer interface {
	Send(*UpdateInfo) error
	Recv() (*HeartBeatInfo, error)
	grpc.ServerStream
}

type openRASPHeartBeatServer struct {
	grpc.ServerStream
}

func (x *openRASPHeartBeatServer) Send(m *UpdateInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openRASPHeartBeatServer) Recv() (*HeartBeatInfo, error) {
	m := new(HeartBeatInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenRASP_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenRASPServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OpenRASP/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenRASPServer).Register(ctx, req.(*Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenRASP_AddRasp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rasp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenRASPServer).AddRasp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OpenRASP/AddRasp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenRASPServer).AddRasp(ctx, req.(*Rasp))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenRASP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OpenRASP",
	HandlerType: (*OpenRASPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _OpenRASP_Register_Handler,
		},
		{
			MethodName: "AddRasp",
			Handler:    _OpenRASP_AddRasp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _OpenRASP_HeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "openrasp_cloud.proto",
}

func init() { proto1.RegisterFile("openrasp_cloud.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0xad, 0xdb, 0x74, 0x4d, 0xee, 0xd6, 0xfe, 0xfa, 0xb3, 0x0a, 0x8a, 0x0a, 0x48, 0xc5, 0x02,
	0x11, 0x4d, 0x68, 0x9a, 0x3a, 0x04, 0x12, 0x12, 0x0f, 0x85, 0x97, 0x0d, 0x21, 0xa8, 0x3c, 0x18,
	0x8f, 0x28, 0x6b, 0xee, 0x4a, 0x58, 0x67, 0x5b, 0xb1, 0x83, 0xb4, 0x4f, 0xc3, 0x67, 0x40, 0xe2,
	0x03, 0x22, 0x3b, 0x71, 0xd6, 0xf0, 0xef, 0xa5, 0xf5, 0x3d, 0xf7, 0xd8, 0x27, 0xe7, 0xfe, 0x81,
	0x89, 0x54, 0x28, 0x8a, 0x54, 0xab, 0x4f, 0xab, 0x8d, 0x2c, 0xb3, 0x03, 0x55, 0x48, 0x23, 0x69,
	0xdf, 0xfd, 0xb1, 0x1f, 0x04, 0xe0, 0x83, 0xca, 0x52, 0x83, 0x27, 0xe2, 0x42, 0xd2, 0x11, 0x74,
	0xf3, 0x2c, 0x26, 0x33, 0x92, 0x04, 0xbc, 0x9b, 0x67, 0xf4, 0x05, 0x8c, 0x54, 0x21, 0x15, 0x16,
	0x26, 0x47, 0xfd, 0x4a, 0x8a, 0x8b, 0xb8, 0x3b, 0x23, 0xc9, 0xee, 0xfc, 0x56, 0xf5, 0xca, 0xc1,
	0xb2, 0x95, 0xe4, 0xbf, 0x90, 0xe9, 0x01, 0x44, 0x1b, 0xb9, 0x7e, 0xf2, 0xc5, 0xdd, 0xec, 0xb9,
	0x9b, 0xe3, 0xfa, 0xe6, 0x1b, 0x8f, 0xf3, 0x1b, 0x0a, 0x7d, 0x04, 0x03, 0xb5, 0x29, 0xd7, 0xb9,
	0xd0, 0x71, 0x30, 0xeb, 0x25, 0xbb, 0xf3, 0xa1, 0xd7, 0x71, 0x28, 0xf7, 0x59, 0x76, 0x04, 0xfd,
	0xc5, 0x1a, 0x85, 0xa1, 0x53, 0x08, 0x3f, 0x4b, 0x6d, 0xde, 0xa6, 0x57, 0x18, 0xef, 0xcc, 0x48,
	0x12, 0xf1, 0x26, 0xb6, 0x66, 0xa4, 0x8e, 0x43, 0x87, 0x76, 0xa5, 0x66, 0xdf, 0xba, 0x10, 0xf0,
	0x54, 0xab, 0x2d, 0x97, 0x91, 0x73, 0x39, 0x86, 0x5e, 0x99, 0x67, 0x71, 0x34, 0x23, 0xc9, 0x90,
	0xdb, 0xa3, 0x45, 0xd6, 0x79, 0xe6, 0xcc, 0x0e, 0xb9, 0x3d, 0x52, 0x0a, 0x01, 0x5a, 0x52, 0xcf,
	0x41, 0xee, 0x6c, 0xc5, 0x4b, 0x8d, 0x85, 0x13, 0x0f, 0x2a, 0x71, 0x1f, 0xd3, 0x04, 0x02, 0x73,
	0xad, 0x30, 0xee, 0xcf, 0x48, 0x32, 0x9a, 0x4f, 0x6a, 0x1f, 0x56, 0xde, 0xfd, 0xbc, 0xbf, 0x56,
	0xc8, 0x1d, 0x83, 0xc6, 0x30, 0xf8, 0x8a, 0x85, 0xce, 0xa5, 0xa8, 0x1d, 0xf8, 0x90, 0x3e, 0x80,
	0xe1, 0x45, 0x91, 0x5e, 0xe1, 0x47, 0x59, 0x5c, 0xda, 0x0b, 0xf1, 0xc0, 0xe5, 0xdb, 0x20, 0xdd,
	0x87, 0x71, 0x03, 0x9c, 0xd5, 0x0f, 0x55, 0xa6, 0x7f, 0xc3, 0xd9, 0x3d, 0x08, 0xbd, 0x3a, 0x0d,
	0x21, 0x78, 0xbd, 0x38, 0x5b, 0x8c, 0x3b, 0x74, 0x00, 0xbd, 0xe5, 0xf1, 0x72, 0x4c, 0xd8, 0x39,
	0xec, 0x55, 0xc3, 0xc0, 0x51, 0x97, 0x1b, 0x57, 0xdd, 0xb2, 0x1a, 0x0e, 0x3f, 0x14, 0x4d, 0x4c,
	0xef, 0x42, 0x94, 0xeb, 0xd3, 0x72, 0xb5, 0x42, 0xad, 0x5d, 0xa1, 0x42, 0x7e, 0x03, 0x58, 0x53,
	0x57, 0xa8, 0x75, 0xba, 0x46, 0x57, 0xb1, 0x88, 0xfb, 0x90, 0x3d, 0x86, 0x09, 0xc7, 0x75, 0xae,
	0x4d, 0x91, 0x9a, 0x5c, 0x0a, 0x8e, 0x5a, 0x49, 0xa1, 0x91, 0x4e, 0xa0, 0x6f, 0xe4, 0x25, 0x8a,
	0xba, 0x2f, 0x55, 0xc0, 0x4e, 0xe0, 0xbf, 0x45, 0x96, 0xd9, 0x6f, 0x6e, 0x88, 0x2d, 0x61, 0xf2,
	0x0f, 0xe1, 0x6e, 0x5b, 0x78, 0x0e, 0xc3, 0x63, 0x4c, 0x0b, 0xf3, 0x12, 0x53, 0xe3, 0x86, 0xfd,
	0x3e, 0xf4, 0xed, 0x5a, 0xd8, 0x47, 0xec, 0xac, 0xed, 0x6e, 0xf5, 0x88, 0x57, 0x19, 0xf6, 0x14,
	0x76, 0xaa, 0xd1, 0xb3, 0xfd, 0x17, 0xb6, 0xcf, 0xd5, 0xd7, 0xb9, 0xb3, 0xd5, 0x5a, 0x49, 0x61,
	0x50, 0x18, 0xa7, 0xb5, 0xc7, 0x7d, 0xc8, 0xf6, 0x61, 0xd4, 0x5e, 0x8d, 0x6d, 0x2e, 0x69, 0x73,
	0x1f, 0x42, 0xd4, 0x2c, 0xc3, 0xdf, 0x69, 0xf3, 0xef, 0x04, 0xc2, 0x77, 0x0a, 0x05, 0x5f, 0x9c,
	0x2e, 0xe9, 0x73, 0x88, 0x1a, 0x2f, 0xd4, 0x0f, 0x57, 0xcb, 0xdd, 0xf4, 0xff, 0x1a, 0xbd, 0xd9,
	0x6e, 0xd6, 0x49, 0xc8, 0x21, 0xa1, 0xcf, 0x20, 0xac, 0x1a, 0x80, 0x05, 0xdd, 0xab, 0x49, 0x6e,
	0x99, 0xa6, 0x77, 0x7c, 0x05, 0xfe, 0xd0, 0x1f, 0xd6, 0xa1, 0x87, 0x30, 0xa8, 0x7b, 0x41, 0xb7,
	0x6b, 0x35, 0xbd, 0xed, 0x1f, 0x69, 0x37, 0x8a, 0x75, 0xce, 0x77, 0x5c, 0xe2, 0xe8, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xfd, 0x4e, 0xc8, 0x83, 0x04, 0x00, 0x00,
}
